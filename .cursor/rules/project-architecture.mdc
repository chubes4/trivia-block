---
description: 
globs: 
alwaysApply: false
---
# Trivia Block Plugin - Technical Architecture

## Project Overview

The **Trivia Block** is a modern WordPress Gutenberg block plugin that creates interactive trivia questions with real-time scoring and customizable result messages. Built with React, @wordpress/scripts, and WordPress coding standards.

### Core Features
- **Interactive Questions**: Multiple choice with immediate feedback
- **Real-time Scoring**: Tracks progress across all questions on a page  
- **Custom Results**: Personalized messages for different score ranges
- **Theme Integration**: Uses CSS custom properties to inherit theme styling
- **Mobile Responsive**: Works perfectly on all devices
- **Accessibility First**: Full keyboard navigation and screen reader support
- **Card-based Design**: Modern, clean interface that feels native to WordPress

### Key Technical Decisions
- **Single Block Focus**: Dedicated trivia block (not quiz) for "Single Purpose Excellence"
- **Server-side Rendering**: SEO-friendly with PHP render callback
- **Group Settings**: Result messages sync across all trivia blocks on a page
- **Theme Inheritance**: CSS variables automatically adapt to existing theme design systems
- **Production Ready**: Complete distribution system with automated builds

## File Structure

```
trivia-block/
├── .cursor/rules/              # Living documentation
│   ├── project-architecture.mdc
│   └── project-plan.mdc
├── src/trivia-block/           # React source files
│   ├── index.js                # Block registration
│   ├── edit.js                 # Editor component (312 lines)
│   ├── save.js                 # Save component (returns null - SSR)
│   └── block.json              # Block configuration & attributes
├── assets/
│   ├── css/
│   │   ├── trivia-block-editor.css     # Editor styling with theme vars
│   │   └── trivia-block-frontend.css   # Frontend styling with theme vars
│   └── js/
│       └── trivia-block-frontend.js    # Frontend interaction (327 lines)
├── includes/
│   └── class-trivia-block-plugin.php   # Main plugin class (286 lines)
├── build/                      # Compiled assets (auto-generated)
├── dist/                       # Distribution package (auto-generated)
├── node_modules/               # Dependencies
├── trivia-block.php            # Main plugin file (69 lines)
├── package.json                # Build configuration
├── webpack.config.js           # Webpack config
├── build-dist.sh              # Distribution build script
├── README.md                   # GitHub documentation
├── readme.txt                 # WordPress.org documentation
└── .gitignore                 # Version control exclusions
```

## Core Components

### 1. Main Plugin File (`trivia-block.php`)
- **Plugin Headers**: Standard WordPress plugin information
- **Security Check**: Prevents direct access
- **Constants**: `TRIVIA_BLOCK_PLUGIN_DIR`, `TRIVIA_BLOCK_PLUGIN_URL`, `TRIVIA_BLOCK_VERSION`
- **Initialization**: Instantiates and initializes the main plugin class
- **Activation Hook**: Future cleanup/setup functionality

### 2. Plugin Class (`class-trivia-block-plugin.php`)
- **Singleton Pattern**: Single instance management
- **WordPress Integration**: Hooks into `init`, `enqueue_block_editor_assets`, `wp_enqueue_scripts`
- **Block Registration**: Registers the trivia block with server-side rendering
- **Asset Management**: Conditional loading with filemtime versioning
- **REST API**: Optional analytics endpoint (`/trivia-block/v1/log-attempt`)
- **Security**: Nonce verification for API requests

### 3. Block Configuration (`src/trivia-block/block.json`)
```json
{
  "name": "trivia-block/trivia",
  "title": "Trivia Question",
  "category": "widgets",
  "attributes": {
    "question": "string",
    "options": "array",
    "correctAnswer": "number", 
    "blockId": "string",
    "resultMessages": "object",
    "scoreRanges": "object"
  }
}
```

### 4. Editor Component (`src/trivia-block/edit.js`)
- **React Hooks**: Uses `useEffect`, WordPress `useBlockProps`
- **Rich Text**: Question input with bold/italic formatting
- **Dynamic Options**: Add/remove 2-6 answer choices
- **Correct Answer UI**: Visual designation with toggles
- **Inspector Controls**: Settings panel for result messages
- **Group Settings Sync**: Real-time sync across all blocks using WordPress Data API
- **Validation**: Prevents publishing incomplete questions
- **Data Keys**: `question`, `options`, `correctAnswer`, `blockId`, `resultMessages`, `scoreRanges`

### 5. Frontend JavaScript (`assets/js/trivia-block-frontend.js`)
- **State Management**: Global `triviaState` object tracking all questions
- **Event Handling**: Click and keyboard interactions
- **Scoring Logic**: Real-time calculation and display
- **Visual Feedback**: Immediate correct/incorrect styling
- **Custom Results**: Uses data attributes from PHP rendering
- **Analytics Logging**: Optional REST API calls
- **Accessibility**: Full keyboard navigation support
- **Reset Function**: `window.resetTrivia()` for development

### 6. Server-side Rendering (PHP `render_callback`)
- **Attribute Sanitization**: `wp_kses_post()` for questions, `sanitize_text_field()` for options
- **HTML Generation**: Clean, semantic structure
- **Data Attributes**: Passes configuration to frontend JavaScript
  - `data-block-id`: Unique identifier
  - `data-correct-answer`: Index of correct option
  - `data-result-messages`: JSON-encoded custom messages
  - `data-score-ranges`: JSON-encoded percentage thresholds
- **Conditional Rendering**: Only renders if question and options are complete

## Theme Integration System

### CSS Custom Properties Architecture
The plugin uses a sophisticated CSS variable system to automatically inherit theme styling:

```css
:root {
  /* Trivia-specific variables that inherit from theme */
  --trivia-card-bg: var(--card-background, #f8fafc);
  --trivia-border: var(--border-color, #ddd);
  --trivia-text: var(--text-color, #000);
  --trivia-accent: var(--accent, #53940b);
  --trivia-link-color: var(--link-color, #0b5394);
  --trivia-shadow: var(--card-shadow, 0 2px 6px rgba(0,0,0,0.08));
  /* ... and more */
}
```

### Theme Variable Mapping
The plugin maps to these theme variables:
- `--card-background` → Card/container backgrounds
- `--border-color` → All borders and dividers  
- `--text-color` → Primary text color
- `--muted-text` → Secondary/helper text
- `--accent` → Primary brand color (green #53940b)
- `--link-color` → Interactive elements (blue #0b5394)
- `--button-bg` / `--button-hover-bg` → Button styling
- `--card-shadow` / `--card-hover-shadow` → Depth and elevation
- `--focus-border-color` / `--focus-box-shadow` → Accessibility focus states

### Dark Mode Support
Automatic adaptation via `@media (prefers-color-scheme: dark)` with theme variable overrides.

### Card-based Design Philosophy
Each trivia question is rendered as a card with:
- Elevated appearance using theme shadows
- Hover effects for interactivity
- Consistent border radius and spacing
- Theme-aware color scheme

## Data Flow

### Editor to Frontend
1. **Edit Component** → Attributes saved to block
2. **Server-side Render** → HTML with data attributes
3. **Frontend JavaScript** → Reads data attributes for configuration
4. **User Interaction** → State updates and visual feedback
5. **Optional Analytics** → REST API logging

### Group Settings Synchronization
1. User changes result message in any block's Inspector Controls
2. `syncResultMessagesAcrossBlocks()` function executes
3. Uses WordPress Data API to find all trivia blocks on page
4. Updates attributes of all other trivia blocks
5. Changes reflected immediately in editor and frontend

### Score Calculation Flow
1. Frontend JavaScript tracks `triviaState.correctAnswers` and `triviaState.totalQuestions`
2. User selection triggers `handleAnswerSelection()`
3. Score percentage calculated: `(correctAnswers / totalQuestions) * 100`
4. Result message determined based on custom `scoreRanges`
5. Final results displayed when all questions answered

## Build and Distribution System

### Development Commands
- `npm run start` - Development server with hot reload
- `npm run build` - Production build (creates `build/` folder)
- `npm run dist` - Complete distribution package (creates `dist/` folder + zip)

### Distribution Process (`build-dist.sh`)
1. **Clean**: Remove previous `dist/` folder
2. **Build**: Run `npm run build` for compiled assets
3. **Copy**: Include only production files (excludes `src/`, `node_modules/`, dev configs)
4. **Generate**: Auto-create distribution `README.md`
5. **Package**: Create `dist/trivia-block.zip` ready for WordPress upload

### Asset Management
- **Conditional Loading**: Assets only enqueue when trivia blocks are present on page
- **Dynamic Versioning**: Uses `filemtime()` for cache busting
- **Dependency Management**: Proper WordPress script dependencies
- **Path Resolution**: Absolute URLs for cross-environment compatibility

## Security and Performance

### Security Measures
- **Nonce Verification**: All AJAX requests use WordPress nonces
- **Input Sanitization**: All user inputs sanitized (`wp_kses_post`, `sanitize_text_field`)
- **Capability Checks**: Editor features respect user permissions
- **Direct Access Prevention**: All PHP files check for `ABSPATH`

### Performance Optimizations
- **Conditional Asset Loading**: Scripts/styles only load when needed
- **Minified Production Builds**: Webpack optimization for smaller file sizes
- **CSS Custom Properties**: Efficient theme inheritance without duplicated styles
- **Single REST Endpoint**: Consolidated analytics logging
- **Efficient Re-rendering**: React component optimization

## WordPress Standards Compliance

### Coding Standards
- **PHP**: WordPress PHP Coding Standards
- **JavaScript**: WordPress JavaScript Coding Standards with ES6+
- **CSS**: WordPress CSS Coding Standards with modern features
- **Accessibility**: WCAG 2.1 AA compliance

### WordPress Integration
- **Gutenberg Native**: Uses official WordPress block APIs
- **Data API**: Leverages WordPress Data for state management
- **REST API**: Follows WordPress REST conventions
- **Internationalization**: Ready for translation with `__()` functions
- **Plugin Standards**: Proper headers, activation hooks, and file structure

## Current Status: PRODUCTION READY ✅

The trivia block plugin is complete and production-ready with:
- ✅ Full Gutenberg integration with theme inheritance
- ✅ Real-time scoring and custom result messages  
- ✅ Mobile-responsive card-based design
- ✅ Accessibility and performance optimization
- ✅ Complete distribution system (`npm run dist`)
- ✅ WordPress.org submission ready

**Distribution**: `dist/trivia-block.zip` contains the complete, production-ready plugin package.
